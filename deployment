-# Copyright (c) 2014 FRITZ Thomas
+# Copyright (c) 2014-2015 FRITZ Thomas
 #
 # Permission is hereby granted, free of charge, to any person obtaining a copy
 # of this software and associated documentation files (the "Software"), to deal
@@ -27,68 +27,72 @@
 #
 
 
-# Received branch will be checked against this. Only deploy when receiving this branch.
-DEPLOY_BRANCH="master"
+# Application Name:
+export DEPLOY_APP_NAME=`whoami`
 
 # This is the root deploy dir.
-DEPLOY_ROOT="/var/www"
+export DEPLOY_ROOT="${HOME}/work"
 
-# This will be 'eval'ed after git checkout -f step.
-# Use this to call your build/update script or run make, grunt, gulp, etc.
-# If empty or not set this step gets ignored.
-UPDATE_CMD='cd "${DEPLOY_TO}" && make "update"'
+# When receiving a new git push, the received branch gets compared to this one.
+# If you do not need this, just add a comment
+export DEPLOY_ALLOWED_BRANCH="master"
 
-# Command gets executed after 'UPDATE_CMD' has finished. Use this to restart running services
-# or daemons. If empty or unset this step gets ignored.
-RESTART_CMD='sudo systemctl restart "${PROJECT_NAME}.service" && sudo systemctl status "${PROJECT_NAME}.service"'
+# You could use this to do a backup before updating to be able to do a quick rollback. 
+# If you need this just delete the comment and modify to your needs
+#PRE_UPDATE_CMD='cd ${DEPLOY_ROOT} && backup.sh'
 
+# Use this to do update tasks and maybe service restarts
+# If you need this just delete the comment and modify to your needs
+#POST_UPDATE_CMD='cd ${DEPLOY_ROOT} && make update'
 
 ###########################################################################################
 
 export GIT_DIR="$(cd $(dirname $(dirname $0));pwd)"
-export PROJECT_NAME="${GIT_DIR##*/}"
-export DEPLOY_TO="${DEPLOY_ROOT}/${PROJECT_NAME}"
-export GIT_WORK_TREE="${DEPLOY_TO}"
+export GIT_WORK_TREE="${DEPLOY_ROOT}"
 IP="$(ip addr show eth0 | grep 'inet ' | cut -f2 | awk '{ print $2}')"
 
-
-echo "+++++++++++++++++++++++ Welcome to '${HOSTNAME}' (${IP}) ++++++++++++++++++++++++"
+echo "githook: $(date): Welcome to '$(hostname -f)' (${IP})"
 echo
 
 # Make sure directory exists. Maybe its deployed for the first time.
-mkdir -p "${DEPLOY_TO}"
+mkdir -p "${DEPLOY_ROOT}"
 
 # Loop, because it is possible to push more than one branch at a time. (git push --all)
 while read oldrev newrev refname
 do
 
-	branch=$(git rev-parse --symbolic --abbrev-ref $refname)
-
-	if [ "${DEPLOY_BRANCH}" == "$branch" ]; then
-		# Make sure GIT_DIR and GIT_WORK_TREE is correctly set and 'export'ed. Otherwhise
-		# these two environment variables could also be passed as parameters to the git cli
-		echo "githook: I will deploy '${DEPLOY_BRANCH}' branch of the '${PROJECT_NAME}' project to '${DEPLOY_TO}'"
-               	git checkout -f "${DEPLOY_BRANCH}"
-                git reset --hard HEAD
-
-		if [ ! -z "${UPDATE_CMD}" ]; then
-			echo
-			echo "githook: UPDATE (CMD: '${UPDATE_CMD}'):"
-			eval $UPDATE_CMD
-		fi
-
-		if [ ! -z "${RESTART_CMD}" ]; then
-			echo
-			echo "githook: RESTART (CMD: '${RESTART_CMD}'):"
-			eval $RESTART_CMD
-		fi
-		
-	else
-		echo "githook: I am NOT going to deploy the '${branch}' branch of the '${PROJECT_NAME}' project. Expected branch to deploy is '${DEPLOY_BRANCH}'."
-	fi
+    export DEPLOY_BRANCH=$(git rev-parse --symbolic --abbrev-ref $refname)
+    export DEPLOY_OLDREV="$oldrev"
+    export DEPLOY_NEWREV="$newrev"
+    export DEPLOY_REFNAME="$refname"
+
+    if [ ! -z "${DEPLOY_ALLOWED_BRANCH}" ]; then
+        if [ "${DEPLOY_ALLOWED_BRANCH}" != "$DEPLOY_BRANCH" ]; then
+            echo "githook: Branch '$DEPLOY_BRANCH' of '${DEPLOY_APP_NAME}' application will not be deployed. Exiting."
+            exit 1
+        fi
+    fi
+
+    if [ ! -z "${PRE_UPDATE_CMD}" ]; then
+       echo
+       echo "githook: PRE UPDATE (CMD: '${PRE_UPDATE_CMD}'):"
+       eval $PRE_UPDATE_CMD || exit 1
+    fi
+
+    # Make sure GIT_DIR and GIT_WORK_TREE is correctly set and 'export'ed. Otherwhise
+    # these two environment variables could also be passed as parameters to the git cli
+    echo "githook: I will deploy '${DEPLOY_BRANCH}' branch of the '${DEPLOY_APP_NAME}' project to '${DEPLOY_ROOT}'"
+    git checkout -f "${DEPLOY_BRANCH}" || exit 1
+    git reset --hard "$DEPLOY_NEWREV" || exit 1
+
+    if [ ! -z "${POST_UPDATE_CMD}" ]; then
+       echo
+       echo "githook: POST UPDATE (CMD: '${POST_UPDATE_CMD}'):"
+       eval $POST_UPDATE_CMD || exit 1
+    fi
 
 done
 
 echo
-echo "++++++++++++++++++++ See you soon at '${HOSTNAME}' (${IP}) ++++++++++++++++++++++"
+echo "githook: $(date): See you soon at '$(hostname -f)' (${IP})"
 exit 0 
